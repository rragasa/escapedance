a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:none}table{border-collapse:collapse;border-spacing:0}
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}details,main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}@media (min-width:320px){.xs-col,.xs-col-right{float:left;box-sizing:border-box}.xs-col-right{float:right}.xs-col-1{width:8.33333%}.xs-col-2{width:16.66667%}.xs-col-3{width:25%}.xs-col-4{width:33.33333%}.xs-col-5{width:41.66667%}.xs-col-6{width:50%}.xs-col-7{width:58.33333%}.xs-col-8{width:66.66667%}.xs-col-9{width:75%}.xs-col-10{width:83.33333%}.xs-col-11{width:91.66667%}.xs-col-12{width:100%}}body,html{font-family:Source Sans Pro,sans-serif;line-height:1.5rem}.brand-type{font-family:houschka-pro,sans-serif}.bg-green{background:#44b649}.bg-white{background:#fff}.content{padding:2.5rem;color:#fff}.global-header{min-height:10px}.global-header .header-nav{position:fixed;z-index:3;-webkit-clip-path:polygon(0 0,100% 0,100% 60%,0 100%);clip-path:polygon(0 0,100% 0,100% 60%,0 100%);width:100vw;background:#44b649;top:0}.global-header .header-nav ul{margin:0;padding:0;list-style:none;overflow:hidden;background-color:#44b649}.global-header .header-nav li a{display:block;padding:10px;text-decoration:none;color:#f7914e}.global-header .header-nav li a .header .menu-btn:hover,.global-header .header-nav li a:hover{background-color:#f4f4f4}.global-header .header-nav .global-logo{display:block;float:left;text-decoration:none;width:155px}@media (min-width:33.75em){.global-header .header-nav .global-logo{width:175px}}@media (min-width:45em){.global-header .header-nav .global-logo{width:185px}}@media (min-width:60em){.global-header .header-nav .global-logo{width:200px}}.global-header .header-nav .menu{clear:both;max-height:0;transition:max-height .2s ease;padding-left:30px;padding-right:30px}@media (min-width:33.75em){.global-header .header-nav .menu{padding-left:35px;padding-right:35px}}@media (min-width:45em){.global-header .header-nav .menu{padding-left:40px;padding-right:40px}}@media (min-width:60em){.global-header .header-nav .menu{padding-left:45px;padding-right:45px}}.global-header .header-nav .menu-icon{cursor:pointer;display:inline-block;float:right;padding:30px 15px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.global-header .header-nav .menu-icon .navicon{background:#f7914e;display:block;height:3px;position:relative;transition:background .2s ease-out;width:30px}.global-header .header-nav .menu-icon .navicon:after,.global-header .header-nav .menu-icon .navicon:before{background:#f7914e;content:"";display:block;height:100%;position:absolute;transition:all .2s ease-out;width:100%}.global-header .header-nav .menu-icon .navicon:before{top:8px}.global-header .header-nav .menu-icon .navicon:after{top:-8px}.global-header .header-nav .menu-btn{display:none}.global-header .header-nav .menu-btn:checked~.menu{max-height:540px;display:block}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon{background:0 0}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon:before{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon:after{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.global-header .header-nav .menu-btn:checked~.menu-icon:not(.steps) .navicon:after,.global-header .header-nav .menu-btn:checked~.menu-icon:not(.steps) .navicon:before{top:0}.global-header .header-nav .clearfix:after{padding:15px}.parallax-container{min-height:500px;background:0 0}.btn{margin-top:20px;padding:15px;border-radius:3px;width:100%}.btn--green{border:1px solid #44b649;color:#44b649}.btn--orange{border:1px solid #f7914e;color:#f7914e;background:0 0}.footer{background:#44b649;height:200px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9yZXNldC5zY3NzIiwic3R5bGUubWluLmNzcyIsIl9ub3JtYWxpemUuc2NzcyIsIl9ncmlkLnNjc3MiLCJfYmFzZS5zY3NzIiwiX2NvbW1vbi5zY3NzIiwiY29tcG9uZW50cy9fbmF2YmFyLnNjc3MiLCJjb21wb25lbnRzL19idXR0b24uc2NzcyIsImNvbXBvbmVudHMvX2Zvb3Rlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLDJaQVdFLFNBQ0EsVUFDQSxTQUVBLGFBQ0EsdUJDdkJ5ZCxDRDJCM2QsOEVBRUUsYUM3QnFqQixDRGdDdmpCLEtBQ0UsYUNqQ3drQixDRG9DMWtCLE1BQ0UsZUNyQzhsQixDRHdDaG1CLGFBQ0UsV0N6Q3VuQixDRDRDdG1CLG9EQUdqQixZQy9Dd3JCLENEa0QxckIsTUFDRSx5QkFDQSxnQkNwRHd1QixDQUFDO0FBQzN1Qiw0RUFBNEUsQUNTNUUsS0FDRSxpQkFDQSw2QkRWaUQsQ0NvQm5ELEtBQ0UsUURyQitELENDNlRqRSxhQWhTRSxhRDdCMEYsQ0NxQzVGLEdBQ0UsY0FDQSxjRHZDMEgsQ0NrRDVILEdBQ0UsdUJBQ0EsU0FDQSxnQkRyRDhLLENDc0doTCxrQkF4Q0UsZ0NBQ0EsYUQvRDhPLENDeUVoUCxFQUNFLDRCRDFFNlEsQ0NrRi9RLFlBQ0UsbUJBRUEseUNBQUEsQURyRjZVLGdDQUFBLENDNEYvVSxTQUVFLGtCRDlGeVcsQ0NpSDNXLE1BQ0UsYURsSDZYLENDMEgvWCxRQUVFLGNBQ0EsY0FDQSxrQkFDQSx1QkQvSDJjLENDa0k3YyxJQUNFLGFEbkk2ZCxDQ3NJL2QsSUFDRSxTRHZJMmUsQ0NpSjdlLElBQ0UsaUJEbEppZ0IsQ0M2Sm5nQixzQ0FLRSxvQkFDQSxlQUNBLGlCQUNBLFFEcktvbUIsQ0M2S3RtQixhQUVFLGdCRC9La29CLENDdUxwb0IsY0FFRSxtQkR6TG9xQixDQXdOdHFCLGdEQ3BCRSx5QkRwTTh1QixDQWlPaHZCLHdIQ2xCRSxrQkFDQSxTRGhOazRCLENBMk9wNEIsNEdDaEJFLDZCRDNONGdDLENDa085Z0MsU0FDRSwwQkRuT2dqQyxDQzZPbGpDLE9BRUUsY0FDQSxjQUNBLGVBRUEsa0JEblBxbkMsQ0MwUHZuQyxTQUNFLHVCRDNQc3BDLENDa1F4cEMsU0FDRSxhRG5RNnFDLENBMFIvcUMsb0NDYkUsc0JBQ0EsU0Q5UWl2QyxDQW9TbnZDLGtGQ2JFLFdEdlIrMEMsQ0E0U2oxQyxjQ1pFLDZCQUNBLG1CRGpTODRDLENBcVRoNUMseUNDWkUsdUJEelMrOEMsQ0NpVGo5Qyw2QkFDRSwwQkFDQSxZRG5UbWhELENDcVVyaEQsUUFDRSxpQkR0VTZpRCxDQTJWL2lELGtCQ1ZFLFlEalY0a0QsQ0VtQjlrRCx5QkFDRSxzQkFDRSxXQUNBLHFCRnRCMHBELENFeUI1cEQsY0FDRSxXRjFCb3JELENFOEJ0ckQsVUFDRSxjRi9CNnNELENFa0Mvc0QsVUFDRSxlRm5DdXVELENFc0N6dUQsVUFDRSxTRnZDMnZELENFMEM3dkQsVUFDRSxlRjNDcXhELENFOEN2eEQsVUFDRSxlRi9DK3lELENFa0RqekQsVUFDRSxTRm5EbTBELENFc0RyMEQsVUFDRSxlRnZENjFELENFMEQvMUQsVUFDRSxlRjNEdTNELENFOER6M0QsVUFDRSxTRi9EMjRELENFa0U3NEQsV0FDRSxlRm5FczZELENFc0V4NkQsV0FDRSxlRnZFaThELENFMEVuOEQsV0FDRSxVQUFBLENBQUEsQ0M3RUUsVUFDSix1Q0FDQSxrQkhBZ2lFLENJR2xpRSxZQUNFLG1DSkpnbEUsQ0lRbGxFLFVBQ0Usa0JKVDZtRSxDSVkvbUUsVUFDRSxlSmJ1b0UsQ0lnQnpvRSxTQUNFLGVBQ0EsVUpsQjBxRSxDS2lCNXFFLGVBQ0UsZUxsQnlzRSxDS2lCM3NFLDJCQUtJLGVBQ0EsVUFDQSxzREFDQSw4Q0FDQSxZQUNBLG1CQUNBLEtMNUJzNEUsQ0tpQjE0RSw4QkFjTSxTQUNBLFVBQ0EsZ0JBQ0EsZ0JBQ0Esd0JMbkM4K0UsQ0tpQnAvRSxnQ0FzQk0sY0FDQSxhQUNBLHFCQUNBLGFMMUM0a0YsQ0tpQmxsRiw4RkE2QlEsd0JMOUNpc0YsQ0tpQnpzRix3Q0FrQ00sY0FDQSxXQUNBLHFCQUNBLFdMdERxeUYsQ0VrTHZ5RiwyQkdqS0osd0NBd0NRLFdBQUEsQ0FBQSxDTHpEbzNGLHdCS2lCNTNGLHdDQTZDUSxXQUFBLENBQUEsQ0w5RGk4Rix3QktpQno4Rix3Q0FrRFEsV0FBQSxDQUFBLENBbERSLGlDQXVETSxXQUNBLGFBQ0EsK0JBQ0Esa0JBQ0Esa0JMNUU0b0csQ0VrTDlvRywyQkdqS0osaUNBOERRLGtCQUNBLGtCQUFBLENBQUEsQ0xoRjZ1Ryx3QktpQnJ2RyxpQ0FvRVEsa0JBQ0Esa0JBQUEsQ0FBQSxDTHRGNDBHLHdCS2lCcDFHLGlDQTBFUSxrQkFDQSxrQkFBQSxDQUFBLENBM0VSLHNDQWdGTSxlQUNBLHFCQUNBLFlBQ0Esa0JBQ0Esa0JBQ0EseUJBQUEsQUx0R3VqSCxzQktzR3ZqSCxBTHRHdWpILHFCS3NHdmpILEFMdEd1akgsZ0JBQUEsQ0tpQjdqSCwrQ0F3RlEsbUJBQ0EsY0FDQSxXQUNBLGtCQUNBLG1DQUNBLFVMOUdndEgsQ0tpQnh0SCwyR0FpR1UsbUJBQ0EsV0FDQSxjQUNBLFlBQ0Esa0JBQ0EsNEJBQ0EsVUx4SDA2SCxDS2lCcDdILHNEQTJHVSxPTDVIdytILENLaUJsL0gscURBK0dVLFFMaElzaUksQ0tpQmhqSSxxQ0FxSE0sWUx0STRsSSxDS2lCbG1JLG1EQXdIUSxpQkFDQSxhTDFJNHFJLENLaUJwckksaUVBNkhRLGNMOUk0dkksQ0tpQnB3SSx3RUFnSVUsaUNBQUEsQUxqSjIxSSx3QkFBQSxDS2lCcjJJLHVFQW9JVSxnQ0FBQSxBTHJKMDdJLHVCQUFBLENLaUJwOEksdUtBMklVLEtMNUp1bUosQ0tpQmpuSiwyQ0FpSk0sWUxsS21xSixDS3dLenFKLG9CQUNFLGlCQUNBLGNMMUsydEosQ01HN3RKLEtBQ0UsZ0JBQ0EsYUFDQSxrQkFDQSxVTlAweEosQ01TMXhKLFlBQ0UseUJBQ0EsYU5YMjBKLENNYzcwSixhQUNFLHlCQUNBLGNBQ0EsY05qQjg0SixDT0FsNUosUUFDRSxtQkFDQSxZUEZ3N0osQ0FBQyIsImZpbGUiOiJzdHlsZS5taW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cbiAgIHYyLjAgfCAyMDExMDEyNlxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLCBxIHtcbiAgcXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcbiAgY29udGVudDogJyc7XG4gIGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG4iLCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbmJvZHkge1xuICBsaW5lLWhlaWdodDogMTsgfVxuXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbmJsb2NrcXVvdGUsIHEge1xuICBxdW90ZXM6IG5vbmU7IH1cblxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG4gIGNvbnRlbnQ6ICcnO1xuICBjb250ZW50OiBub25lOyB9XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cblxuLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4xIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuLyogRG9jdW1lbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxuICovXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovIH1cblxuLyogU2VjdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cbiAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxuICovXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxuICovXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMSAqL1xuICBoZWlnaHQ6IDA7XG4gIC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTtcbiAgLyogMiAqLyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIC8qIDEgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmNvZGUsXG5rYmQsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxuICovXG5pbWcge1xuICBib3JkZXItc3R5bGU6IG5vbmU7IH1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICovXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDEwMCU7XG4gIC8qIDEgKi9cbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgbWFyZ2luOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cbmJ1dHRvbixcbmlucHV0IHtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5idXR0b24sXG5zZWxlY3Qge1xuICAvKiAxICovXG4gIHRleHQtdHJhbnNmb3JtOiBub25lOyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqL1xuYnV0dG9uLFxuW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJyZXNldFwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwic3VibWl0XCJdOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICovXG5idXR0b246LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cImJ1dHRvblwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwicmVzZXRcIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInN1Ym1pdFwiXTotbW96LWZvY3VzcmluZyB7XG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDsgfVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuZmllbGRzZXQge1xuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmxlZ2VuZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgZGlzcGxheTogdGFibGU7XG4gIC8qIDEgKi9cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDMgKi9cbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgLyogMSAqLyB9XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xucHJvZ3Jlc3Mge1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDEwKy5cbiAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLlxuICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICovXG5bdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovIH1cblxuLyogSW50ZXJhY3RpdmVcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cbiAqL1xuZGV0YWlscyB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07IH1cblxuLyogTWlzY1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxuICovXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAqL1xuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiAzMjBweCkge1xuICAueHMtY29sIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG4gIC54cy1jb2wtcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG4gIC54cy1jb2wtMSB7XG4gICAgd2lkdGg6IDguMzMzMzMlOyB9XG4gIC54cy1jb2wtMiB7XG4gICAgd2lkdGg6IDE2LjY2NjY3JTsgfVxuICAueHMtY29sLTMge1xuICAgIHdpZHRoOiAyNSU7IH1cbiAgLnhzLWNvbC00IHtcbiAgICB3aWR0aDogMzMuMzMzMzMlOyB9XG4gIC54cy1jb2wtNSB7XG4gICAgd2lkdGg6IDQxLjY2NjY3JTsgfVxuICAueHMtY29sLTYge1xuICAgIHdpZHRoOiA1MCU7IH1cbiAgLnhzLWNvbC03IHtcbiAgICB3aWR0aDogNTguMzMzMzMlOyB9XG4gIC54cy1jb2wtOCB7XG4gICAgd2lkdGg6IDY2LjY2NjY3JTsgfVxuICAueHMtY29sLTkge1xuICAgIHdpZHRoOiA3NSU7IH1cbiAgLnhzLWNvbC0xMCB7XG4gICAgd2lkdGg6IDgzLjMzMzMzJTsgfVxuICAueHMtY29sLTExIHtcbiAgICB3aWR0aDogOTEuNjY2NjclOyB9XG4gIC54cy1jb2wtMTIge1xuICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuaHRtbCwgYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTsgfVxuXG4uYnJhbmQtdHlwZSB7XG4gIGZvbnQtZmFtaWx5OiBob3VzY2hrYS1wcm8sIHNhbnMtc2VyaWY7IH1cblxuLmJnLWdyZWVuIHtcbiAgYmFja2dyb3VuZDogIzQ0YjY0OTsgfVxuXG4uYmctd2hpdGUge1xuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XG5cbi5jb250ZW50IHtcbiAgcGFkZGluZzogMi41cmVtO1xuICBjb2xvcjogI2ZmZjsgfVxuXG4uZ2xvYmFsLWhlYWRlciB7XG4gIG1pbi1oZWlnaHQ6IDEwcHg7IH1cbiAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYge1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB6LWluZGV4OiAzO1xuICAgIC13ZWJraXQtY2xpcC1wYXRoOiBwb2x5Z29uKDAgMCwgMTAwJSAwLCAxMDAlIDYwJSwgMCUgMTAwJSk7XG4gICAgY2xpcC1wYXRoOiBwb2x5Z29uKDAgMCwgMTAwJSAwLCAxMDAlIDYwJSwgMCUgMTAwJSk7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGJhY2tncm91bmQ6ICM0NGI2NDk7XG4gICAgdG9wOiAwOyB9XG4gICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgdWwge1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQ0YjY0OTsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IGxpIGEge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgY29sb3I6ICNmNzkxNGU7IH1cbiAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IGxpIGE6aG92ZXIsXG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiBsaSBhIC5oZWFkZXIgLm1lbnUtYnRuOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5nbG9iYWwtbG9nbyB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgd2lkdGg6IDE1NXB4OyB9XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogMzMuNzVlbSkge1xuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAuZ2xvYmFsLWxvZ28ge1xuICAgICAgICAgIHdpZHRoOiAxNzVweDsgfSB9XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNDVlbSkge1xuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAuZ2xvYmFsLWxvZ28ge1xuICAgICAgICAgIHdpZHRoOiAxODVweDsgfSB9XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNjBlbSkge1xuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAuZ2xvYmFsLWxvZ28ge1xuICAgICAgICAgIHdpZHRoOiAyMDBweDsgfSB9XG4gICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUge1xuICAgICAgY2xlYXI6IGJvdGg7XG4gICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgdHJhbnNpdGlvbjogbWF4LWhlaWdodCAuMnMgZWFzZTtcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7IH1cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAzMy43NWVtKSB7XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51IHtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDM1cHg7XG4gICAgICAgICAgcGFkZGluZy1yaWdodDogMzVweDsgfSB9XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNDVlbSkge1xuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudSB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDQwcHg7IH0gfVxuICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDYwZW0pIHtcbiAgICAgICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogNDVweDtcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiA0NXB4OyB9IH1cbiAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1pY29uIHtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGZsb2F0OiByaWdodDtcbiAgICAgIHBhZGRpbmc6IDMwcHggMTVweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1pY29uIC5uYXZpY29uIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2Y3OTE0ZTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogM3B4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjJzIGVhc2Utb3V0O1xuICAgICAgICB3aWR0aDogMzBweDsgfVxuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1pY29uIC5uYXZpY29uOmJlZm9yZSwgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUtaWNvbiAubmF2aWNvbjphZnRlciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2Y3OTE0ZTtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZS1vdXQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAgICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUtaWNvbiAubmF2aWNvbjpiZWZvcmUge1xuICAgICAgICAgIHRvcDogOHB4OyB9XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWljb24gLm5hdmljb246YWZ0ZXIge1xuICAgICAgICAgIHRvcDogLThweDsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWJ0biB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51IHtcbiAgICAgICAgbWF4LWhlaWdodDogNTQwcHg7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb24gLm5hdmljb24ge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb24gLm5hdmljb246YmVmb3JlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpOyB9XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWJ0bjpjaGVja2VkIH4gLm1lbnUtaWNvbiAubmF2aWNvbjphZnRlciB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb246bm90KC5zdGVwcykgLm5hdmljb246YmVmb3JlLCAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb246bm90KC5zdGVwcykgLm5hdmljb246YWZ0ZXIge1xuICAgICAgICB0b3A6IDBweDsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5jbGVhcmZpeDphZnRlciB7XG4gICAgICBwYWRkaW5nOiAxNXB4OyB9XG5cbi5wYXJhbGxheC1jb250YWluZXIge1xuICBtaW4taGVpZ2h0OiA1MDBweDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IH1cblxuLmJ0biB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIHBhZGRpbmc6IDE1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgd2lkdGg6IDEwMCU7IH1cbiAgLmJ0bi0tZ3JlZW4ge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM0NGI2NDk7XG4gICAgY29sb3I6ICM0NGI2NDk7IH1cbiAgLmJ0bi0tb3JhbmdlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZjc5MTRlO1xuICAgIGNvbG9yOiAjZjc5MTRlO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyB9XG5cbi5mb290ZXIge1xuICBiYWNrZ3JvdW5kOiAjNDRiNjQ5O1xuICBoZWlnaHQ6IDIwMHB4OyB9XG4iLCIvKiEgbm9ybWFsaXplLmNzcyB2OC4wLjEgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG5cbi8qIERvY3VtZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxuICovXG5cbmh0bWwge1xuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbn1cblxuLyogU2VjdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qKlxuICogUmVuZGVyIHRoZSBgbWFpbmAgZWxlbWVudCBjb25zaXN0ZW50bHkgaW4gSUUuXG4gKi9cblxubWFpbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cblxuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gKi9cblxuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cblxuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICovXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5pbWcge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbi8qIEZvcm1zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICBtYXJnaW46IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQgeyAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbixcbnNlbGVjdCB7IC8qIDEgKi9cbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqL1xuXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICovXG5cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxubGVnZW5kIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xuICBkaXNwbGF5OiB0YWJsZTsgLyogMSAqL1xuICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cbiAgcGFkZGluZzogMDsgLyogMyAqL1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAxICovXG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDEwKy5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLlxuICovXG5cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICovXG5cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cblxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbn1cblxuLyogSW50ZXJhY3RpdmVcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxuICovXG5cbmRldGFpbHMge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKiBNaXNjXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwKy5cbiAqL1xuXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAuXG4gKi9cblxuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiOyAvLyBGaXhlcyBhbiBpc3N1ZSB3aGVyZSBSdWJ5IGxvY2FsZSBpcyBub3Qgc2V0IHByb3Blcmx5XG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MtbXEvc2Fzcy1tcS9wdWxsLzEwXG5cbiRtb2JpbGU6IDMyMHB4O1xuJHRhYmxldDogNTQwcHg7XG4kdGFibGV0TGFyZ2U6IDcyMHB4O1xuJGRlc2t0b3A6IDk2MHB4O1xuJGRlc2t0b3BMYXJnZTogMTAyNHB4O1xuXG4kYnJlYWtwb2ludC14czogXCIobWluLXdpZHRoOiAjeyRtb2JpbGV9KVwiO1xuJGJyZWFrcG9pbnQtc206IFwiKG1pbi13aWR0aDogI3skdGFibGV0fSlcIjtcbiRicmVha3BvaW50LW1kOiBcIihtaW4td2lkdGg6ICN7JHRhYmxldExhcmdlfSlcIjtcbiRicmVha3BvaW50LWxnOiBcIihtaW4td2lkdGg6ICN7JGRlc2t0b3B9KVwiO1xuJGJyZWFrcG9pbnQteGw6IFwiKG1pbi13aWR0aDogI3skZGVza3RvcExhcmdlfSlcIjtcblxuJGJyZWFrcG9pbnQtbWF4LXhzOiBcIihtYXgtd2lkdGg6ICN7JG1vYmlsZX0pXCI7XG4kYnJlYWtwb2ludC1tYXgtc206IFwiKG1heC13aWR0aDogI3skdGFibGV0fSlcIjtcbiRicmVha3BvaW50LW1heC1tZDogXCIobWF4LXdpZHRoOiAjeyR0YWJsZXRMYXJnZX0pXCI7XG4kYnJlYWtwb2ludC1tYXgtbGc6IFwiKG1heC13aWR0aDogI3skZGVza3RvcH0pXCI7XG4kYnJlYWtwb2ludC1tYXgteGw6IFwiKG1heC13aWR0aDogI3skZGVza3RvcExhcmdlfSlcIjtcblxuQG1lZGlhICN7JGJyZWFrcG9pbnQteHN9IHtcbiAgLnhzLWNvbCB7XG4gICAgZmxvYXQ6IGxlZnQ7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuXG4gIC54cy1jb2wtcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG5cbiAgLnhzLWNvbC0xIHtcbiAgICB3aWR0aDogMSAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtMiB7XG4gICAgd2lkdGg6IDIgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTMge1xuICAgIHdpZHRoOiAzIC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC00IHtcbiAgICB3aWR0aDogNCAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtNSB7XG4gICAgd2lkdGg6IDUgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTYge1xuICAgIHdpZHRoOiA2IC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC03IHtcbiAgICB3aWR0aDogNyAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtOCB7XG4gICAgd2lkdGg6IDggLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTkge1xuICAgIHdpZHRoOiA5IC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC0xMCB7XG4gICAgd2lkdGg6IDEwIC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC0xMSB7XG4gICAgd2lkdGg6IDExIC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC0xMiB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuLy8vIEJhc2UgZm9udCBzaXplIG9uIHRoZSBgPGJvZHk+YCBlbGVtZW50XG4vLy8gQHR5cGUgTnVtYmVyICh1bml0KVxuJG1xLWJhc2UtZm9udC1zaXplOiAxNnB4ICFkZWZhdWx0O1xuXG4vLy8gUmVzcG9uc2l2ZSBtb2RlXG4kbXEtcmVzcG9uc2l2ZTogdHJ1ZSAhZGVmYXVsdDtcblxuLy8vIEJyZWFrcG9pbnQgbGlzdFxuJG1xLWJyZWFrcG9pbnRzOiAobW9iaWxlOiAkbW9iaWxlLCB0YWJsZXQ6ICR0YWJsZXQsIHRhYmxldExhcmdlOiAkdGFibGV0TGFyZ2UsIGRlc2t0b3A6ICRkZXNrdG9wLCBkZXNrdG9wTGFyZ2U6ICRkZXNrdG9wTGFyZ2UpICFkZWZhdWx0O1xuXG4vLy8gU3RhdGljIGJyZWFrcG9pbnQgKGZvciBmaXhlZC13aWR0aCBsYXlvdXRzKVxuJG1xLXN0YXRpYy1icmVha3BvaW50OiBkZXNrdG9wICFkZWZhdWx0O1xuXG4vLy8gU2hvdyBicmVha3BvaW50cyBpbiB0aGUgdG9wIHJpZ2h0IGNvcm5lclxuJG1xLXNob3ctYnJlYWtwb2ludHM6ICgpICFkZWZhdWx0O1xuXG4vLy8gQ3VzdG9taXplIHRoZSBtZWRpYSB0eXBlIChlLmcuIGBAbWVkaWEgc2NyZWVuYCBvciBgQG1lZGlhIHByaW50YClcbiRtcS1tZWRpYS10eXBlOiBhbGwgIWRlZmF1bHQ7XG5cbi8vLyBDb252ZXJ0IHBpeGVscyB0byBlbXNcbkBmdW5jdGlvbiBtcS1weDJlbSgkcHgsICRiYXNlLWZvbnQtc2l6ZTogJG1xLWJhc2UtZm9udC1zaXplKSB7XG4gIEBpZiB1bml0bGVzcygkcHgpIHtcbiAgICBAd2FybiBcIkFzc3VtaW5nICN7JHB4fSB0byBiZSBpbiBwaXhlbHMsIGF0dGVtcHRpbmcgdG8gY29udmVydCBpdCBpbnRvIHBpeGVscy5cIjtcblxuICAgIEByZXR1cm4gbXEtcHgyZW0oJHB4ICogMXB4LCAkYmFzZS1mb250LXNpemUpO1xuICB9XG4gIEBlbHNlIGlmIHVuaXQoJHB4KSA9PSBlbSB7XG4gICAgQHJldHVybiAkcHg7XG4gIH1cblxuICBAcmV0dXJuICRweCAvICRiYXNlLWZvbnQtc2l6ZSAqIDFlbTtcbn1cblxuLy8vIEdldCBhIGJyZWFrcG9pbnQncyB3aWR0aFxuQGZ1bmN0aW9uIG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRtcS1icmVha3BvaW50cykge1xuICBAaWYgbWFwLWhhcy1rZXkoJGJyZWFrcG9pbnRzLCAkbmFtZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgfVxuICBAZWxzZSB7XG4gICAgQHdhcm4gXCJCcmVha3BvaW50ICN7JG5hbWV9IHdhc24ndCBmb3VuZCBpbiAkYnJlYWtwb2ludHMuXCI7XG4gIH1cbn1cblxuLy8vIE1lZGlhIFF1ZXJ5IG1peGluXG5AbWl4aW4gbXEoJGZyb206IGZhbHNlLCAkdW50aWw6IGZhbHNlLCAkYW5kOiBmYWxzZSwgJG1lZGlhLXR5cGU6ICRtcS1tZWRpYS10eXBlLCAkYnJlYWtwb2ludHM6ICRtcS1icmVha3BvaW50cywgJHJlc3BvbnNpdmU6ICRtcS1yZXNwb25zaXZlLCAkc3RhdGljLWJyZWFrcG9pbnQ6ICRtcS1zdGF0aWMtYnJlYWtwb2ludCkge1xuICAkbWluLXdpZHRoOiAwO1xuICAkbWF4LXdpZHRoOiAwO1xuICAkbWVkaWEtcXVlcnk6IFwiXCI7XG5cbiAgLy8gRnJvbTogdGhpcyBicmVha3BvaW50IChpbmNsdXNpdmUpXG4gIEBpZiAkZnJvbSB7XG4gICAgQGlmIHR5cGUtb2YoJGZyb20pID09IG51bWJlciB7XG4gICAgICAkbWluLXdpZHRoOiBtcS1weDJlbSgkZnJvbSk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRtaW4td2lkdGg6IG1xLXB4MmVtKG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRmcm9tLCAkYnJlYWtwb2ludHMpKTtcbiAgICB9XG4gIH1cblxuICAvLyBVbnRpbDogdGhhdCBicmVha3BvaW50IChleGNsdXNpdmUpXG4gIEBpZiAkdW50aWwge1xuICAgIEBpZiB0eXBlLW9mKCR1bnRpbCkgPT0gbnVtYmVyIHtcbiAgICAgICRtYXgtd2lkdGg6IG1xLXB4MmVtKCR1bnRpbCk7XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICRtYXgtd2lkdGg6IG1xLXB4MmVtKG1xLWdldC1icmVha3BvaW50LXdpZHRoKCR1bnRpbCwgJGJyZWFrcG9pbnRzKSkgLSAwLjAxZW07XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzcG9uc2l2ZSBzdXBwb3J0IGlzIGRpc2FibGVkLCByYXN0ZXJpemUgdGhlIG91dHB1dCBvdXRzaWRlIEBtZWRpYSBibG9ja3NcbiAgLy8gVGhlIGJyb3dzZXIgd2lsbCByZWx5IG9uIHRoZSBjYXNjYWRlIGl0c2VsZi5cbiAgQGlmICRyZXNwb25zaXZlID09IGZhbHNlIHtcbiAgICAkc3RhdGljLWJyZWFrcG9pbnQtd2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRzdGF0aWMtYnJlYWtwb2ludCwgJGJyZWFrcG9pbnRzKTtcbiAgICAkdGFyZ2V0LXdpZHRoOiBtcS1weDJlbSgkc3RhdGljLWJyZWFrcG9pbnQtd2lkdGgpO1xuXG4gICAgLy8gT3V0cHV0IG9ubHkgcnVsZXMgdGhhdCBzdGFydCBhdCBvciBzcGFuIG91ciB0YXJnZXQgd2lkdGhcbiAgICBAaWYgJGFuZCA9PSBmYWxzZSBhbmQgJG1pbi13aWR0aCA8PSAkdGFyZ2V0LXdpZHRoIGFuZCAoJHVudGlsID09IGZhbHNlIG9yICRtYXgtd2lkdGggPj0gJHRhcmdldC13aWR0aCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIHtcbiAgICBAaWYgJG1pbi13aWR0aCAhPSAwIHtcbiAgICAgICRtZWRpYS1xdWVyeTogXCIjeyRtZWRpYS1xdWVyeX0gYW5kIChtaW4td2lkdGg6ICN7JG1pbi13aWR0aH0pXCI7XG4gICAgfVxuXG4gICAgQGlmICRtYXgtd2lkdGggIT0gMCB7XG4gICAgICAkbWVkaWEtcXVlcnk6IFwiI3skbWVkaWEtcXVlcnl9IGFuZCAobWF4LXdpZHRoOiAjeyRtYXgtd2lkdGh9KVwiO1xuICAgIH1cblxuICAgIEBpZiAkYW5kIHtcbiAgICAgICRtZWRpYS1xdWVyeTogXCIjeyRtZWRpYS1xdWVyeX0gYW5kICN7JGFuZH1cIjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdW5uZWNlc3NhcnkgbWVkaWEgcXVlcnkgcHJlZml4ICdhbGwgYW5kICdcbiAgICBAaWYgJG1lZGlhLXR5cGUgPT0gXCJhbGxcIiBhbmQgJG1lZGlhLXF1ZXJ5ICE9IFwiXCIge1xuICAgICAgJG1lZGlhLXR5cGU6IFwiXCI7XG4gICAgICAkbWVkaWEtcXVlcnk6IHN0ci1zbGljZSh1bnF1b3RlKCRtZWRpYS1xdWVyeSksIDYpO1xuICAgIH1cblxuICAgIEBtZWRpYSAjeyRtZWRpYS10eXBlICsgJG1lZGlhLXF1ZXJ5fSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuLy8vIEFkZCBhIGJyZWFrcG9pbnRcbkBtaXhpbiBtcS1hZGQtYnJlYWtwb2ludCgkbmFtZSwgJHdpZHRoKSB7XG4gICRuZXctYnJlYWtwb2ludDogKCRuYW1lOiAkd2lkdGgpO1xuICAkbXEtYnJlYWtwb2ludHM6IG1hcC1tZXJnZSgkbXEtYnJlYWtwb2ludHMsICRuZXctYnJlYWtwb2ludCkgIWdsb2JhbDtcbn1cblxuLy8vIFNob3cgdGhlIGFjdGl2ZSBicmVha3BvaW50IGluIHRoZSB0b3AgcmlnaHQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydFxuQG1peGluIG1xLXNob3ctYnJlYWtwb2ludHMoJHNob3ctYnJlYWtwb2ludHM6ICRtcS1zaG93LWJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludHM6ICRtcS1icmVha3BvaW50cykge1xuICBib2R5OmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjhlMztcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZiZWVkNTtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNmYmVlZDU7XG4gICAgY29sb3I6ICNjMDk4NTM7XG4gICAgZm9udDogc21hbGwtY2FwdGlvbjtcbiAgICBwYWRkaW5nOiAzcHggNnB4O1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICByaWdodDogMDtcbiAgICB0b3A6IDA7XG4gICAgei1pbmRleDogMTAwO1xuXG4gICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBicmVha3BvaW50cyB0aGF0IHNob3VsZCBiZSBzaG93blxuICAgIEBlYWNoICRzaG93LWJyZWFrcG9pbnQgaW4gJHNob3ctYnJlYWtwb2ludHMge1xuICAgICAgJHdpZHRoOiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkc2hvdy1icmVha3BvaW50LCAkYnJlYWtwb2ludHMpO1xuXG4gICAgICBAaW5jbHVkZSBtcSgkc2hvdy1icmVha3BvaW50LCAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cykge1xuICAgICAgICBjb250ZW50OiBcIiN7JHNob3ctYnJlYWtwb2ludH0g4omlICN7JHdpZHRofSAoI3ttcS1weDJlbSgkd2lkdGgpfSlcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQGlmIGxlbmd0aCgkbXEtc2hvdy1icmVha3BvaW50cykgPiAwIHtcbiAgQGluY2x1ZGUgbXEtc2hvdy1icmVha3BvaW50cztcbn1cbiIsImh0bWwsIGJvZHkge1xuICBmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG59XG4iLCIvLyBDb2xvdXIgVmFyaWFibGVzXG4kZXNjYXBlLWdyZWVuOiAjNDRiNjQ5O1xuJGVzY2FwZS1vcmFuZ2U6ICNmNzkxNGU7XG5cbi8vIEZvbnQgRmFtaWx5XG4uYnJhbmQtdHlwZSB7XG4gIGZvbnQtZmFtaWx5OiBob3VzY2hrYS1wcm8sIHNhbnMtc2VyaWY7XG59XG5cbi8vIExheW91dFxuLmJnLWdyZWVuIHtcbiAgYmFja2dyb3VuZDogJGVzY2FwZS1ncmVlbjtcbn1cblxuLmJnLXdoaXRlIHtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbn1cblxuLmNvbnRlbnQge1xuICBwYWRkaW5nOiAyLjVyZW07XG4gIGNvbG9yOiAjZmZmO1xufVxuIiwiJHBhcmFsbGF4LW1pbi1oZWlnaHQ6IDUwMHB4O1xuJGhlYWRlci1uYXYtbWluLWhlaWdodDogMTBweDtcbiRoZWFkZXItbmF2LXdpZHRoOiAxMDB2dztcbiRoZWFkZXItbmF2LXVsLWFmdGVyLXBhZGRpbmc6IDE1cHg7XG4kaGVhZGVyLW5hdi1saXN0LXBhZGRpbmc6IDEwcHg7XG4kaGVhZGVyLW5hdi1ob3Zlci1iYWNrZ3JvdW5kOiAjZjRmNGY0O1xuJGhlYWRlci1uYXYtbG9nby13aWR0aC1kZWZhdWx0OiAxNTVweDtcbiRoZWFkZXItbmF2LWxvZ28td2lkdGgtdGFibGV0OiAxNzVweDtcbiRoZWFkZXItbmF2LWxvZ28td2lkdGgtdGFibGV0TGFyZ2U6IDE4NXB4O1xuJGhlYWRlci1uYXYtbG9nby13aWR0aC1kZXNrdG9wOiAyMDBweDtcbiRoZWFkZXItbmF2LW1lbnUtaWNvbi1wYWRkaW5nOiAzMHB4IDE1cHg7XG4kaGVhZGVyLW5hdmljb24taGVpZ2h0OiAzcHg7XG4kaGVhZGVyLW5hdmljb24td2lkdGg6IDMwcHg7XG4kaGVhZGVyLW5hdmljb24tYmVmb3JlLXRvcDogOHB4O1xuJGhlYWRlci1uYXZpY29uLWFmdGVyLXRvcDogLThweDtcbiRoZWFkZXItY2hlY2tlZC1tZW51LWJ0bi1tYXgtaGVpZ2h0OiA1NDBweDtcbiRoZWFkZXItY2hlY2tlZC1tZW51LWljb246IDBweDtcblxuLy8gR2xvYmFsIEhlYWRlclxuLmdsb2JhbC1oZWFkZXIge1xuICBtaW4taGVpZ2h0OiAkaGVhZGVyLW5hdi1taW4taGVpZ2h0O1xuXG4gIC8vIEhlYWRlciBOYXZpZ2F2dGlvblxuICAuaGVhZGVyLW5hdiB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDM7XG4gICAgLXdlYmtpdC1jbGlwLXBhdGg6IHBvbHlnb24oMCAwLCAxMDAlIDAsIDEwMCUgNjAlLCAwJSAxMDAlKTtcbiAgICBjbGlwLXBhdGg6IHBvbHlnb24oMCAwLCAxMDAlIDAsIDEwMCUgNjAlLCAwJSAxMDAlKTtcbiAgICB3aWR0aDogJGhlYWRlci1uYXYtd2lkdGg7XG4gICAgYmFja2dyb3VuZDogJGVzY2FwZS1ncmVlbjtcbiAgICB0b3A6IDA7XG5cbiAgICB1bCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZXNjYXBlLWdyZWVuO1xuICAgIH1cblxuICAgIGxpIGEge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwYWRkaW5nOiAkaGVhZGVyLW5hdi1saXN0LXBhZGRpbmc7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICBjb2xvcjogJGVzY2FwZS1vcmFuZ2U7XG5cbiAgICAgICY6aG92ZXIsXG4gICAgICAuaGVhZGVyIC5tZW51LWJ0bjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoZWFkZXItbmF2LWhvdmVyLWJhY2tncm91bmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmdsb2JhbC1sb2dvIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICB3aWR0aDogJGhlYWRlci1uYXYtbG9nby13aWR0aC1kZWZhdWx0O1xuXG4gICAgICBAaW5jbHVkZSBtcSgkZnJvbTogJHRhYmxldCkge1xuICAgICAgICB3aWR0aDogJGhlYWRlci1uYXYtbG9nby13aWR0aC10YWJsZXQ7XG4gICAgICB9XG5cblxuICAgICAgQGluY2x1ZGUgbXEoJGZyb206ICR0YWJsZXRMYXJnZSkge1xuICAgICAgICB3aWR0aDogJGhlYWRlci1uYXYtbG9nby13aWR0aC10YWJsZXRMYXJnZTtcbiAgICAgIH1cblxuXG4gICAgICBAaW5jbHVkZSBtcSgkZnJvbTogJGRlc2t0b3ApIHtcbiAgICAgICAgd2lkdGg6ICRoZWFkZXItbmF2LWxvZ28td2lkdGgtZGVza3RvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWVudSB7XG4gICAgICBjbGVhcjogYm90aDtcbiAgICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IC4ycyBlYXNlO1xuICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuICAgICAgcGFkZGluZy1yaWdodDogMzBweDtcblxuICAgICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCkge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDM1cHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDM1cHg7XG4gICAgICB9XG5cblxuICAgICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldExhcmdlKSB7XG4gICAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogNDBweDtcbiAgICAgIH1cblxuXG4gICAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ1cHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDQ1cHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1lbnUtaWNvbiB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBwYWRkaW5nOiAkaGVhZGVyLW5hdi1tZW51LWljb24tcGFkZGluZztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgICAubmF2aWNvbiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICRlc2NhcGUtb3JhbmdlO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgaGVpZ2h0OiAkaGVhZGVyLW5hdmljb24taGVpZ2h0O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjJzIGVhc2Utb3V0O1xuICAgICAgICB3aWR0aDogJGhlYWRlci1uYXZpY29uLXdpZHRoO1xuXG4gICAgICAgICY6YmVmb3JlLFxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAkZXNjYXBlLW9yYW5nZTtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZS1vdXQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cblxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgdG9wOiAkaGVhZGVyLW5hdmljb24tYmVmb3JlLXRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgIHRvcDogJGhlYWRlci1uYXZpY29uLWFmdGVyLXRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC5tZW51LWJ0biB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuXG4gICAgICAmOmNoZWNrZWQgfiAubWVudSB7XG4gICAgICAgIG1heC1oZWlnaHQ6ICRoZWFkZXItY2hlY2tlZC1tZW51LWJ0bi1tYXgtaGVpZ2h0O1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cblxuICAgICAgJjpjaGVja2VkIH4gLm1lbnUtaWNvbiAubmF2aWNvbiB7XG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICY6Y2hlY2tlZCB+IC5tZW51LWljb246bm90KC5zdGVwcykgLm5hdmljb24ge1xuICAgICAgICAmOmJlZm9yZSxcbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgdG9wOiAkaGVhZGVyLWNoZWNrZWQtbWVudS1pY29uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLmNsZWFyZml4OmFmdGVyIHtcbiAgICAgIHBhZGRpbmc6ICRoZWFkZXItbmF2LXVsLWFmdGVyLXBhZGRpbmc7XG4gICAgfVxuICB9XG59XG5cbi8vIFBhcmFsbGF4IFNjcm9sbFxuLnBhcmFsbGF4LWNvbnRhaW5lciB7XG4gIG1pbi1oZWlnaHQ6IDUwMHB4O1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbiIsIiRidG4tbWFyZ2luOiAyMHB4O1xuJGJ0bi1wYWRkaW5nOiAxNXB4O1xuJGJvcmRlci1yYWRpdXM6IDNweDtcbiRidG4td2lkdGgtZGVmYXVsdDogMTAwJTtcblxuLmJ0biB7XG4gIG1hcmdpbi10b3A6ICRidG4tbWFyZ2luO1xuICBwYWRkaW5nOiAkYnRuLXBhZGRpbmc7XG4gIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xuICB3aWR0aDogJGJ0bi13aWR0aC1kZWZhdWx0O1xuXG4gICYtLWdyZWVuIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZXNjYXBlLWdyZWVuO1xuICAgIGNvbG9yOiAkZXNjYXBlLWdyZWVuO1xuICB9XG5cbiAgJi0tb3JhbmdlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZXNjYXBlLW9yYW5nZTtcbiAgICBjb2xvcjogJGVzY2FwZS1vcmFuZ2U7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cbn1cbiIsIiRmb290ZXItaGVpZ2h0OiAyMDBweDtcblxuLmZvb3RlciB7XG4gIGJhY2tncm91bmQ6ICRlc2NhcGUtZ3JlZW47XG4gIGhlaWdodDogJGZvb3Rlci1oZWlnaHQ7XG59XG4iXX0= */
