a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:none}table{border-collapse:collapse;border-spacing:0}
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}details,main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}@media (min-width:320px){.xs-col,.xs-col-right{float:left;box-sizing:border-box}.xs-col-right{float:right}.xs-col-1{width:8.33333%}.xs-col-2{width:16.66667%}.xs-col-3{width:25%}.xs-col-4{width:33.33333%}.xs-col-5{width:41.66667%}.xs-col-6{width:50%}.xs-col-7{width:58.33333%}.xs-col-8{width:66.66667%}.xs-col-9{width:75%}.xs-col-10{width:83.33333%}.xs-col-11{width:91.66667%}.xs-col-12{width:100%}}.brand-type{font-family:houschka-pro,sans-serif}.bg-green{background:#44b649}.bg-white{background:#fff}.content{padding:2.5rem;color:#fff}body,html{font-family:Source Sans Pro,sans-serif;line-height:1.5rem}.global-header,html{background:#44b649}.global-header{min-height:10px}.global-header .header-nav .menu,.global-header__bg{background-image:linear-gradient(#44b649,#44b649);-webkit-transform:skewY(-4deg);transform:skewY(-4deg);-webkit-transform-origin:top left;transform-origin:top left}.global-header__bg{position:fixed;top:0;bottom:0;right:0;left:0;height:180px;width:100%}.global-header .header-nav{position:fixed;z-index:3;width:100vw}.global-header .header-nav ul{margin:0;padding:0;list-style:none;overflow:hidden}.global-header .header-nav li a{display:block;padding:10px;text-decoration:none;color:#f7914e;-webkit-transform:skewY(4deg);transform:skewY(4deg)}.global-header .header-nav .menu{clear:both;max-height:0;transition:max-height .2s ease;padding-left:30px;padding-right:30px}@media (min-width:33.75em){.global-header .header-nav .menu{padding-left:35px;padding-right:35px}}@media (min-width:45em){.global-header .header-nav .menu{padding-left:40px;padding-right:40px}}@media (min-width:60em){.global-header .header-nav .menu{padding-left:45px;padding-right:45px}}.global-header .header-nav .menu-icon{cursor:pointer;display:inline-block;float:right;padding:55px 15px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (min-width:60em){.global-header .header-nav .menu-icon{padding:45px 15px}}.global-header .header-nav .menu-icon .navicon{background:#f7914e;display:block;height:3px;position:relative;transition:background .2s ease-out;width:30px}.global-header .header-nav .menu-icon .navicon:after,.global-header .header-nav .menu-icon .navicon:before{background:#f7914e;content:"";display:block;height:100%;position:absolute;transition:all .2s ease-out;width:100%}.global-header .header-nav .menu-icon .navicon:before{top:8px}.global-header .header-nav .menu-icon .navicon:after{top:-8px}.global-header .header-nav .menu-btn{display:none}.global-header .header-nav .menu-btn:checked~.menu{max-height:540px;display:block}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon{background:0 0}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon:before{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.global-header .header-nav .menu-btn:checked~.menu-icon .navicon:after{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.global-header .header-nav .menu-btn:checked~.menu-icon:not(.steps) .navicon:after,.global-header .header-nav .menu-btn:checked~.menu-icon:not(.steps) .navicon:before{top:0}.parallax-container{min-height:500px;background:0 0}.global-logo img{width:260px}@media (min-width:60em){.global-logo img{width:340px}}.btn{margin-top:20px;padding:15px;border-radius:3px;width:100%}@media (min-width:33.75em){.btn{width:180px}}.btn--green{border:1px solid #44b649;color:#44b649}.btn--orange{border:1px solid #f7914e;color:#f7914e;background:0 0}.footer{background:#44b649;min-height:200px}@media (min-width:45em){.footer ul{-moz-column-count:2;-moz-column-gap:10px;-webkit-column-count:2;-webkit-column-gap:10px;column-count:2;column-gap:10px}}.footer-menu{text-align:center}@media (min-width:45em){.footer-menu{text-align:initial;padding-left:30px;padding-top:20px}}.footer-menu li a{display:block;padding:5px;text-decoration:none;color:#f7914e}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9yZXNldC5zY3NzIiwic3R5bGUubWluLmNzcyIsIl9ub3JtYWxpemUuc2NzcyIsIl9ncmlkLnNjc3MiLCJfY29tbW9uLnNjc3MiLCJfYmFzZS5zY3NzIiwiY29tcG9uZW50cy9fbmF2YmFyLnNjc3MiLCJjb21wb25lbnRzL19idXR0b24uc2NzcyIsImNvbXBvbmVudHMvX2Zvb3Rlci5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLDJaQVdFLFNBQ0EsVUFDQSxTQUVBLGFBQ0EsdUJDdkJ5ZCxDRDJCM2QsOEVBRUUsYUM3QnFqQixDRGdDdmpCLEtBQ0UsYUNqQ3drQixDRG9DMWtCLE1BQ0UsZUNyQzhsQixDRHdDaG1CLGFBQ0UsV0N6Q3VuQixDRDRDdG1CLG9EQUdqQixZQy9Dd3JCLENEa0QxckIsTUFDRSx5QkFDQSxnQkNwRHd1QixDQUFDO0FBQzN1Qiw0RUFBNEUsQUNTNUUsS0FDRSxpQkFDQSw2QkRWaUQsQ0NvQm5ELEtBQ0UsUURyQitELENDNlRqRSxhQWhTRSxhRDdCMEYsQ0NxQzVGLEdBQ0UsY0FDQSxjRHZDMEgsQ0NrRDVILEdBQ0UsdUJBQ0EsU0FDQSxnQkRyRDhLLENDc0doTCxrQkF4Q0UsZ0NBQ0EsYUQvRDhPLENDeUVoUCxFQUNFLDRCRDFFNlEsQ0NrRi9RLFlBQ0UsbUJBRUEseUNBQUEsQURyRjZVLGdDQUFBLENDNEYvVSxTQUVFLGtCRDlGeVcsQ0NpSDNXLE1BQ0UsYURsSDZYLENDMEgvWCxRQUVFLGNBQ0EsY0FDQSxrQkFDQSx1QkQvSDJjLENDa0k3YyxJQUNFLGFEbkk2ZCxDQ3NJL2QsSUFDRSxTRHZJMmUsQ0NpSjdlLElBQ0UsaUJEbEppZ0IsQ0M2Sm5nQixzQ0FLRSxvQkFDQSxlQUNBLGlCQUNBLFFEcktvbUIsQ0M2S3RtQixhQUVFLGdCRC9La29CLENDdUxwb0IsY0FFRSxtQkR6TG9xQixDQXdOdHFCLGdEQ3BCRSx5QkRwTTh1QixDQWlPaHZCLHdIQ2xCRSxrQkFDQSxTRGhOazRCLENBMk9wNEIsNEdDaEJFLDZCRDNONGdDLENDa085Z0MsU0FDRSwwQkRuT2dqQyxDQzZPbGpDLE9BRUUsY0FDQSxjQUNBLGVBRUEsa0JEblBxbkMsQ0MwUHZuQyxTQUNFLHVCRDNQc3BDLENDa1F4cEMsU0FDRSxhRG5RNnFDLENBMFIvcUMsb0NDYkUsc0JBQ0EsU0Q5UWl2QyxDQW9TbnZDLGtGQ2JFLFdEdlIrMEMsQ0E0U2oxQyxjQ1pFLDZCQUNBLG1CRGpTODRDLENBcVRoNUMseUNDWkUsdUJEelMrOEMsQ0NpVGo5Qyw2QkFDRSwwQkFDQSxZRG5UbWhELENDcVVyaEQsUUFDRSxpQkR0VTZpRCxDQTJWL2lELGtCQ1ZFLFlEalY0a0QsQ0VtQjlrRCx5QkFDRSxzQkFDRSxXQUNBLHFCRnRCMHBELENFeUI1cEQsY0FDRSxXRjFCb3JELENFOEJ0ckQsVUFDRSxjRi9CNnNELENFa0Mvc0QsVUFDRSxlRm5DdXVELENFc0N6dUQsVUFDRSxTRnZDMnZELENFMEM3dkQsVUFDRSxlRjNDcXhELENFOEN2eEQsVUFDRSxlRi9DK3lELENFa0RqekQsVUFDRSxTRm5EbTBELENFc0RyMEQsVUFDRSxlRnZENjFELENFMEQvMUQsVUFDRSxlRjNEdTNELENFOER6M0QsVUFDRSxTRi9EMjRELENFa0U3NEQsV0FDRSxlRm5FczZELENFc0V4NkQsV0FDRSxlRnZFaThELENFMEVuOEQsV0FDRSxVQUFBLENBQUEsQ0N4RUosWUFDRSxtQ0hKMGdFLENHUTVnRSxVQUNFLGtCSFR1aUUsQ0dZemlFLFVBQ0UsZUhiaWtFLENHZ0Jua0UsU0FDRSxlQUNBLFVIbEJvbUUsQ0lGaG1FLFVBQ0osdUNBQ0Esa0JKQTBxRSxDS2dCNXFFLG9CRFpFLGtCSkppdEUsQ0tnQm50RSxlQUNFLGVMakJndkUsQ0tnQmx2RSxvREE0Q00sa0RBQ0EsK0JBQUEsQUFDQSx1QkFBQSxrQ0FBQSxBTDlEbTRFLHlCQUFBLENLb0J2NEUsbUJBQ0UsZUFDQSxNQUNBLFNBQ0EsUUFDQSxPQUNBLGFBQ0EsVUwzQjY5RSxDS2dCaitFLDJCQW1CSSxlQUNBLFVBQ0EsV0xyQzZoRixDS2dCamlGLDhCQXdCTSxTQUNBLFVBQ0EsZ0JBQ0EsZUwzQzRtRixDS2dCbG5GLGdDQStCTSxjQUNBLGFBQ0EscUJBQ0EsY0FDQSw4QkFBQSxBTG5EZ3VGLHFCQUFBLENLZ0J0dUYsaUNBdUNNLFdBQ0EsYUFDQSwrQkFDQSxrQkFDQSxrQkwzRDYxRixDRWtMLzFGLDJCR2xLSixpQ0FpRFEsa0JBQ0Esa0JBQUEsQ0FBQSxDTGxFODdGLHdCS2dCdDhGLGlDQXVEUSxrQkFDQSxrQkFBQSxDQUFBLENMeEU2aEcsd0JLZ0JyaUcsaUNBNkRRLGtCQUNBLGtCQUFBLENBQUEsQ0E5RFIsc0NBbUVNLGVBQ0EscUJBQ0EsWUFDQSxrQkFDQSxrQkFDQSx5QkFBQSxBTHhGd3dHLHNCS3dGeHdHLEFMeEZ3d0cscUJLd0Z4d0csQUx4Rnd3RyxnQkFBQSxDRWtMMXdHLHdCR2xLSixzQ0EyRVEsaUJBQUEsQ0FBQSxDQTNFUiwrQ0FnRlEsbUJBQ0EsY0FDQSxXQUNBLGtCQUNBLG1DQUNBLFVMckdrL0csQ0tnQjEvRywyR0F5RlUsbUJBQ0EsV0FDQSxjQUNBLFlBQ0Esa0JBQ0EsNEJBQ0EsVUwvRzRzSCxDS2dCdHRILHNEQW1HVSxPTG5IMHdILENLZ0JweEgscURBdUdVLFFMdkh3MEgsQ0tnQmwxSCxxQ0E2R00sWUw3SDgzSCxDS2dCcDRILG1EQWdIUSxpQkFDQSxhTGpJODhILENLZ0J0OUgsaUVBcUhRLGNMckk4aEksQ0tnQnRpSSx3RUF3SFUsaUNBQUEsQUx4STZuSSx3QkFBQSxDS2dCdm9JLHVFQTRIVSxnQ0FBQSxBTDVJNHRJLHVCQUFBLENLZ0J0dUksdUtBbUlVLEtMbkp5NEksQ0sySm41SSxvQkFDRSxpQkFDQSxjTDdKcThJLENLZ0t2OEksaUJBRUksV0xsS2crSSxDRWtMaCtJLHdCR2xCSixpQkFLTSxXQUFBLENBQUEsQ0NsS04sS0FDRSxnQkFDQSxhQUNBLGtCQUNBLFVOUHVsSixDRWtMcmxKLDJCSS9LSixLQU9JLFdBQUEsQ0FBQSxDQUlGLFlBQ0UseUJBQ0EsYU5oQnFySixDTW1CdnJKLGFBQ0UseUJBQ0EsY0FDQSxjTnRCd3ZKLENPQzV2SixRQUNFLG1CQUNBLGdCUEhzeUosQ0VrTHB5Six3QktqTEosV0FNTSxvQkFDQSxxQkFDQSx1QkFDQSx3QkFDQSxlQUNBLGVBQUEsQ0FBQSxDQUlKLGFBQ0UsaUJQakI4OUosQ0VrTDk5Six3QktsS0YsYUFJSSxtQkFDQSxrQkFDQSxnQkFBQSxDQUFBLENBTkgsa0JBV0csY0FDQSxZQUNBLHFCQUNBLGFQOUJ1b0ssQ0FBQyIsImZpbGUiOiJzdHlsZS5taW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cbiAgIHYyLjAgfCAyMDExMDEyNlxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLCBxIHtcbiAgcXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcbiAgY29udGVudDogJyc7XG4gIGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG4iLCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbmJvZHkge1xuICBsaW5lLWhlaWdodDogMTsgfVxuXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbmJsb2NrcXVvdGUsIHEge1xuICBxdW90ZXM6IG5vbmU7IH1cblxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG4gIGNvbnRlbnQ6ICcnO1xuICBjb250ZW50OiBub25lOyB9XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cblxuLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4xIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuLyogRG9jdW1lbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxuICovXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovIH1cblxuLyogU2VjdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cbiAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxuICovXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxuICovXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwOyB9XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMSAqL1xuICBoZWlnaHQ6IDA7XG4gIC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTtcbiAgLyogMiAqLyB9XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICovXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIC8qIDEgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmNvZGUsXG5rYmQsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTsgfVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxuICovXG5pbWcge1xuICBib3JkZXItc3R5bGU6IG5vbmU7IH1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICovXG5idXR0b24sXG5pbnB1dCxcbm9wdGdyb3VwLFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDEwMCU7XG4gIC8qIDEgKi9cbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgbWFyZ2luOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cbmJ1dHRvbixcbmlucHV0IHtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5idXR0b24sXG5zZWxlY3Qge1xuICAvKiAxICovXG4gIHRleHQtdHJhbnNmb3JtOiBub25lOyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqL1xuYnV0dG9uLFxuW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJyZXNldFwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwic3VibWl0XCJdOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICovXG5idXR0b246LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cImJ1dHRvblwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwicmVzZXRcIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInN1Ym1pdFwiXTotbW96LWZvY3VzcmluZyB7XG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDsgfVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuZmllbGRzZXQge1xuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmxlZ2VuZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgZGlzcGxheTogdGFibGU7XG4gIC8qIDEgKi9cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDMgKi9cbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgLyogMSAqLyB9XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xucHJvZ3Jlc3Mge1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDEwKy5cbiAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLlxuICovXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICovXG5bdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovIH1cblxuLyogSW50ZXJhY3RpdmVcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cbiAqL1xuZGV0YWlscyB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07IH1cblxuLyogTWlzY1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxuICovXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAqL1xuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiAzMjBweCkge1xuICAueHMtY29sIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG4gIC54cy1jb2wtcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG4gIC54cy1jb2wtMSB7XG4gICAgd2lkdGg6IDguMzMzMzMlOyB9XG4gIC54cy1jb2wtMiB7XG4gICAgd2lkdGg6IDE2LjY2NjY3JTsgfVxuICAueHMtY29sLTMge1xuICAgIHdpZHRoOiAyNSU7IH1cbiAgLnhzLWNvbC00IHtcbiAgICB3aWR0aDogMzMuMzMzMzMlOyB9XG4gIC54cy1jb2wtNSB7XG4gICAgd2lkdGg6IDQxLjY2NjY3JTsgfVxuICAueHMtY29sLTYge1xuICAgIHdpZHRoOiA1MCU7IH1cbiAgLnhzLWNvbC03IHtcbiAgICB3aWR0aDogNTguMzMzMzMlOyB9XG4gIC54cy1jb2wtOCB7XG4gICAgd2lkdGg6IDY2LjY2NjY3JTsgfVxuICAueHMtY29sLTkge1xuICAgIHdpZHRoOiA3NSU7IH1cbiAgLnhzLWNvbC0xMCB7XG4gICAgd2lkdGg6IDgzLjMzMzMzJTsgfVxuICAueHMtY29sLTExIHtcbiAgICB3aWR0aDogOTEuNjY2NjclOyB9XG4gIC54cy1jb2wtMTIge1xuICAgIHdpZHRoOiAxMDAlOyB9IH1cblxuLmJyYW5kLXR5cGUge1xuICBmb250LWZhbWlseTogaG91c2Noa2EtcHJvLCBzYW5zLXNlcmlmOyB9XG5cbi5iZy1ncmVlbiB7XG4gIGJhY2tncm91bmQ6ICM0NGI2NDk7IH1cblxuLmJnLXdoaXRlIHtcbiAgYmFja2dyb3VuZDogI2ZmZjsgfVxuXG4uY29udGVudCB7XG4gIHBhZGRpbmc6IDIuNXJlbTtcbiAgY29sb3I6ICNmZmY7IH1cblxuaHRtbCwgYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTsgfVxuXG5odG1sIHtcbiAgYmFja2dyb3VuZDogIzQ0YjY0OTsgfVxuXG4uZ2xvYmFsLWhlYWRlciB7XG4gIG1pbi1oZWlnaHQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICM0NGI2NDk7IH1cbiAgLmdsb2JhbC1oZWFkZXJfX2JnIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICByaWdodDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTgwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCM0NGI2NDksICM0NGI2NDkpO1xuICAgIHRyYW5zZm9ybTogc2tld1koLTRkZWcpO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0OyB9XG4gIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgei1pbmRleDogMztcbiAgICB3aWR0aDogMTAwdnc7IH1cbiAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiB1bCB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47IH1cbiAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiBsaSBhIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIGNvbG9yOiAjZjc5MTRlO1xuICAgICAgdHJhbnNmb3JtOiBza2V3WSg0ZGVnKTsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51IHtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgbWF4LWhlaWdodDogMDtcbiAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgLjJzIGVhc2U7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCM0NGI2NDksICM0NGI2NDkpO1xuICAgICAgdHJhbnNmb3JtOiBza2V3WSgtNGRlZyk7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDsgfVxuICAgICAgQG1lZGlhIChtaW4td2lkdGg6IDMzLjc1ZW0pIHtcbiAgICAgICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMzVweDtcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNXB4OyB9IH1cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA0NWVtKSB7XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51IHtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQwcHg7XG4gICAgICAgICAgcGFkZGluZy1yaWdodDogNDBweDsgfSB9XG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNjBlbSkge1xuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudSB7XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NXB4O1xuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDQ1cHg7IH0gfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWljb24ge1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgcGFkZGluZzogNTVweCAxNXB4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cbiAgICAgIEBtZWRpYSAobWluLXdpZHRoOiA2MGVtKSB7XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWljb24ge1xuICAgICAgICAgIHBhZGRpbmc6IDQ1cHggMTVweDsgfSB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1pY29uIC5uYXZpY29uIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2Y3OTE0ZTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogM3B4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjJzIGVhc2Utb3V0O1xuICAgICAgICB3aWR0aDogMzBweDsgfVxuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1pY29uIC5uYXZpY29uOmJlZm9yZSwgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUtaWNvbiAubmF2aWNvbjphZnRlciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2Y3OTE0ZTtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZS1vdXQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAgICAgLmdsb2JhbC1oZWFkZXIgLmhlYWRlci1uYXYgLm1lbnUtaWNvbiAubmF2aWNvbjpiZWZvcmUge1xuICAgICAgICAgIHRvcDogOHB4OyB9XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWljb24gLm5hdmljb246YWZ0ZXIge1xuICAgICAgICAgIHRvcDogLThweDsgfVxuICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWJ0biB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51IHtcbiAgICAgICAgbWF4LWhlaWdodDogNTQwcHg7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb24gLm5hdmljb24ge1xuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxuICAgICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb24gLm5hdmljb246YmVmb3JlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpOyB9XG4gICAgICAgIC5nbG9iYWwtaGVhZGVyIC5oZWFkZXItbmF2IC5tZW51LWJ0bjpjaGVja2VkIH4gLm1lbnUtaWNvbiAubmF2aWNvbjphZnRlciB7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XG4gICAgICAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb246bm90KC5zdGVwcykgLm5hdmljb246YmVmb3JlLCAuZ2xvYmFsLWhlYWRlciAuaGVhZGVyLW5hdiAubWVudS1idG46Y2hlY2tlZCB+IC5tZW51LWljb246bm90KC5zdGVwcykgLm5hdmljb246YWZ0ZXIge1xuICAgICAgICB0b3A6IDBweDsgfVxuXG4ucGFyYWxsYXgtY29udGFpbmVyIHtcbiAgbWluLWhlaWdodDogNTAwcHg7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyB9XG5cbi5nbG9iYWwtbG9nbyBpbWcge1xuICB3aWR0aDogMjYwcHg7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwZW0pIHtcbiAgICAuZ2xvYmFsLWxvZ28gaW1nIHtcbiAgICAgIHdpZHRoOiAzNDBweDsgfSB9XG5cbi5idG4ge1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBwYWRkaW5nOiAxNXB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHdpZHRoOiAxMDAlOyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiAzMy43NWVtKSB7XG4gICAgLmJ0biB7XG4gICAgICB3aWR0aDogMTgwcHg7IH0gfVxuICAuYnRuLS1ncmVlbiB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzQ0YjY0OTtcbiAgICBjb2xvcjogIzQ0YjY0OTsgfVxuICAuYnRuLS1vcmFuZ2Uge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmNzkxNGU7XG4gICAgY29sb3I6ICNmNzkxNGU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IH1cblxuLmZvb3RlciB7XG4gIGJhY2tncm91bmQ6ICM0NGI2NDk7XG4gIG1pbi1oZWlnaHQ6IDIwMHB4OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0NWVtKSB7XG4gICAgLmZvb3RlciB1bCB7XG4gICAgICAtbW96LWNvbHVtbi1jb3VudDogMjtcbiAgICAgIC1tb3otY29sdW1uLWdhcDogMTBweDtcbiAgICAgIC13ZWJraXQtY29sdW1uLWNvdW50OiAyO1xuICAgICAgLXdlYmtpdC1jb2x1bW4tZ2FwOiAxMHB4O1xuICAgICAgY29sdW1uLWNvdW50OiAyO1xuICAgICAgY29sdW1uLWdhcDogMTBweDsgfSB9XG4gIC5mb290ZXItbWVudSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgQG1lZGlhIChtaW4td2lkdGg6IDQ1ZW0pIHtcbiAgICAgIC5mb290ZXItbWVudSB7XG4gICAgICAgIHRleHQtYWxpZ246IGluaXRpYWw7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7IH0gfVxuICAgIC5mb290ZXItbWVudSBsaSBhIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgY29sb3I6ICNmNzkxNGU7IH1cbiIsIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMSB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cblxuLyogRG9jdW1lbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuXG4gKi9cblxuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xufVxuXG4vKiBTZWN0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGBtYWluYCBlbGVtZW50IGNvbnNpc3RlbnRseSBpbiBJRS5cbiAqL1xuXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAqL1xuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXG4gIGhlaWdodDogMDsgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTsgLyogMiAqL1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi8qKlxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny1cbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lOyAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cblxuYixcbnN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5jb2RlLFxua2JkLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gKiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxuICovXG5cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gIG1hcmdpbjogMDsgLyogMiAqL1xufVxuXG4vKipcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAqL1xuXG5idXR0b24sXG5pbnB1dCB7IC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLFxuc2VsZWN0IHsgLyogMSAqL1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5cbmZpZWxkc2V0IHtcbiAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5sZWdlbmQge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXG4gIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXG4gIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAzICovXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5cbnByb2dyZXNzIHtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxuICovXG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXG4gKi9cblxuW3R5cGU9XCJjaGVja2JveFwiXSxcblt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gKi9cblxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICovXG5cblt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAqL1xuXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xufVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFIDEwKywgYW5kIEZpcmVmb3guXG4gKi9cblxuZGV0YWlscyB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07XG59XG5cbi8qIE1pc2NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxuICovXG5cbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAqL1xuXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7IC8vIEZpeGVzIGFuIGlzc3VlIHdoZXJlIFJ1YnkgbG9jYWxlIGlzIG5vdCBzZXQgcHJvcGVybHlcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xL3B1bGwvMTBcblxuJG1vYmlsZTogMzIwcHg7XG4kdGFibGV0OiA1NDBweDtcbiR0YWJsZXRMYXJnZTogNzIwcHg7XG4kZGVza3RvcDogOTYwcHg7XG4kZGVza3RvcExhcmdlOiAxMDI0cHg7XG5cbiRicmVha3BvaW50LXhzOiBcIihtaW4td2lkdGg6ICN7JG1vYmlsZX0pXCI7XG4kYnJlYWtwb2ludC1zbTogXCIobWluLXdpZHRoOiAjeyR0YWJsZXR9KVwiO1xuJGJyZWFrcG9pbnQtbWQ6IFwiKG1pbi13aWR0aDogI3skdGFibGV0TGFyZ2V9KVwiO1xuJGJyZWFrcG9pbnQtbGc6IFwiKG1pbi13aWR0aDogI3skZGVza3RvcH0pXCI7XG4kYnJlYWtwb2ludC14bDogXCIobWluLXdpZHRoOiAjeyRkZXNrdG9wTGFyZ2V9KVwiO1xuXG4kYnJlYWtwb2ludC1tYXgteHM6IFwiKG1heC13aWR0aDogI3skbW9iaWxlfSlcIjtcbiRicmVha3BvaW50LW1heC1zbTogXCIobWF4LXdpZHRoOiAjeyR0YWJsZXR9KVwiO1xuJGJyZWFrcG9pbnQtbWF4LW1kOiBcIihtYXgtd2lkdGg6ICN7JHRhYmxldExhcmdlfSlcIjtcbiRicmVha3BvaW50LW1heC1sZzogXCIobWF4LXdpZHRoOiAjeyRkZXNrdG9wfSlcIjtcbiRicmVha3BvaW50LW1heC14bDogXCIobWF4LXdpZHRoOiAjeyRkZXNrdG9wTGFyZ2V9KVwiO1xuXG5AbWVkaWEgI3skYnJlYWtwb2ludC14c30ge1xuICAueHMtY29sIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB9XG5cbiAgLnhzLWNvbC1yaWdodCB7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICAueHMtY29sLTEge1xuICAgIHdpZHRoOiAxIC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC0yIHtcbiAgICB3aWR0aDogMiAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtMyB7XG4gICAgd2lkdGg6IDMgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTQge1xuICAgIHdpZHRoOiA0IC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC01IHtcbiAgICB3aWR0aDogNSAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtNiB7XG4gICAgd2lkdGg6IDYgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTcge1xuICAgIHdpZHRoOiA3IC8gMTIgKiAxMDAlO1xuICB9XG5cbiAgLnhzLWNvbC04IHtcbiAgICB3aWR0aDogOCAvIDEyICogMTAwJTtcbiAgfVxuXG4gIC54cy1jb2wtOSB7XG4gICAgd2lkdGg6IDkgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTEwIHtcbiAgICB3aWR0aDogMTAgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTExIHtcbiAgICB3aWR0aDogMTEgLyAxMiAqIDEwMCU7XG4gIH1cblxuICAueHMtY29sLTEyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxufVxuXG4vLy8gQmFzZSBmb250IHNpemUgb24gdGhlIGA8Ym9keT5gIGVsZW1lbnRcbi8vLyBAdHlwZSBOdW1iZXIgKHVuaXQpXG4kbXEtYmFzZS1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG5cbi8vLyBSZXNwb25zaXZlIG1vZGVcbiRtcS1yZXNwb25zaXZlOiB0cnVlICFkZWZhdWx0O1xuXG4vLy8gQnJlYWtwb2ludCBsaXN0XG4kbXEtYnJlYWtwb2ludHM6IChtb2JpbGU6ICRtb2JpbGUsIHRhYmxldDogJHRhYmxldCwgdGFibGV0TGFyZ2U6ICR0YWJsZXRMYXJnZSwgZGVza3RvcDogJGRlc2t0b3AsIGRlc2t0b3BMYXJnZTogJGRlc2t0b3BMYXJnZSkgIWRlZmF1bHQ7XG5cbi8vLyBTdGF0aWMgYnJlYWtwb2ludCAoZm9yIGZpeGVkLXdpZHRoIGxheW91dHMpXG4kbXEtc3RhdGljLWJyZWFrcG9pbnQ6IGRlc2t0b3AgIWRlZmF1bHQ7XG5cbi8vLyBTaG93IGJyZWFrcG9pbnRzIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXG4kbXEtc2hvdy1icmVha3BvaW50czogKCkgIWRlZmF1bHQ7XG5cbi8vLyBDdXN0b21pemUgdGhlIG1lZGlhIHR5cGUgKGUuZy4gYEBtZWRpYSBzY3JlZW5gIG9yIGBAbWVkaWEgcHJpbnRgKVxuJG1xLW1lZGlhLXR5cGU6IGFsbCAhZGVmYXVsdDtcblxuLy8vIENvbnZlcnQgcGl4ZWxzIHRvIGVtc1xuQGZ1bmN0aW9uIG1xLXB4MmVtKCRweCwgJGJhc2UtZm9udC1zaXplOiAkbXEtYmFzZS1mb250LXNpemUpIHtcbiAgQGlmIHVuaXRsZXNzKCRweCkge1xuICAgIEB3YXJuIFwiQXNzdW1pbmcgI3skcHh9IHRvIGJlIGluIHBpeGVscywgYXR0ZW1wdGluZyB0byBjb252ZXJ0IGl0IGludG8gcGl4ZWxzLlwiO1xuXG4gICAgQHJldHVybiBtcS1weDJlbSgkcHggKiAxcHgsICRiYXNlLWZvbnQtc2l6ZSk7XG4gIH1cbiAgQGVsc2UgaWYgdW5pdCgkcHgpID09IGVtIHtcbiAgICBAcmV0dXJuICRweDtcbiAgfVxuXG4gIEByZXR1cm4gJHB4IC8gJGJhc2UtZm9udC1zaXplICogMWVtO1xufVxuXG4vLy8gR2V0IGEgYnJlYWtwb2ludCdzIHdpZHRoXG5AZnVuY3Rpb24gbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJG5hbWUsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzKSB7XG4gIEBpZiBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICRuYW1lKSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRicmVha3BvaW50cywgJG5hbWUpO1xuICB9XG4gIEBlbHNlIHtcbiAgICBAd2FybiBcIkJyZWFrcG9pbnQgI3skbmFtZX0gd2Fzbid0IGZvdW5kIGluICRicmVha3BvaW50cy5cIjtcbiAgfVxufVxuXG4vLy8gTWVkaWEgUXVlcnkgbWl4aW5cbkBtaXhpbiBtcSgkZnJvbTogZmFsc2UsICR1bnRpbDogZmFsc2UsICRhbmQ6IGZhbHNlLCAkbWVkaWEtdHlwZTogJG1xLW1lZGlhLXR5cGUsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzLCAkcmVzcG9uc2l2ZTogJG1xLXJlc3BvbnNpdmUsICRzdGF0aWMtYnJlYWtwb2ludDogJG1xLXN0YXRpYy1icmVha3BvaW50KSB7XG4gICRtaW4td2lkdGg6IDA7XG4gICRtYXgtd2lkdGg6IDA7XG4gICRtZWRpYS1xdWVyeTogXCJcIjtcblxuICAvLyBGcm9tOiB0aGlzIGJyZWFrcG9pbnQgKGluY2x1c2l2ZSlcbiAgQGlmICRmcm9tIHtcbiAgICBAaWYgdHlwZS1vZigkZnJvbSkgPT0gbnVtYmVyIHtcbiAgICAgICRtaW4td2lkdGg6IG1xLXB4MmVtKCRmcm9tKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgJG1pbi13aWR0aDogbXEtcHgyZW0obXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJGZyb20sICRicmVha3BvaW50cykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVudGlsOiB0aGF0IGJyZWFrcG9pbnQgKGV4Y2x1c2l2ZSlcbiAgQGlmICR1bnRpbCB7XG4gICAgQGlmIHR5cGUtb2YoJHVudGlsKSA9PSBudW1iZXIge1xuICAgICAgJG1heC13aWR0aDogbXEtcHgyZW0oJHVudGlsKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgJG1heC13aWR0aDogbXEtcHgyZW0obXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJHVudGlsLCAkYnJlYWtwb2ludHMpKSAtIDAuMDFlbTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXNwb25zaXZlIHN1cHBvcnQgaXMgZGlzYWJsZWQsIHJhc3Rlcml6ZSB0aGUgb3V0cHV0IG91dHNpZGUgQG1lZGlhIGJsb2Nrc1xuICAvLyBUaGUgYnJvd3NlciB3aWxsIHJlbHkgb24gdGhlIGNhc2NhZGUgaXRzZWxmLlxuICBAaWYgJHJlc3BvbnNpdmUgPT0gZmFsc2Uge1xuICAgICRzdGF0aWMtYnJlYWtwb2ludC13aWR0aDogbXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJHN0YXRpYy1icmVha3BvaW50LCAkYnJlYWtwb2ludHMpO1xuICAgICR0YXJnZXQtd2lkdGg6IG1xLXB4MmVtKCRzdGF0aWMtYnJlYWtwb2ludC13aWR0aCk7XG5cbiAgICAvLyBPdXRwdXQgb25seSBydWxlcyB0aGF0IHN0YXJ0IGF0IG9yIHNwYW4gb3VyIHRhcmdldCB3aWR0aFxuICAgIEBpZiAkYW5kID09IGZhbHNlIGFuZCAkbWluLXdpZHRoIDw9ICR0YXJnZXQtd2lkdGggYW5kICgkdW50aWwgPT0gZmFsc2Ugb3IgJG1heC13aWR0aCA+PSAkdGFyZ2V0LXdpZHRoKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgQGVsc2Uge1xuICAgIEBpZiAkbWluLXdpZHRoICE9IDAge1xuICAgICAgJG1lZGlhLXF1ZXJ5OiBcIiN7JG1lZGlhLXF1ZXJ5fSBhbmQgKG1pbi13aWR0aDogI3skbWluLXdpZHRofSlcIjtcbiAgICB9XG5cbiAgICBAaWYgJG1heC13aWR0aCAhPSAwIHtcbiAgICAgICRtZWRpYS1xdWVyeTogXCIjeyRtZWRpYS1xdWVyeX0gYW5kIChtYXgtd2lkdGg6ICN7JG1heC13aWR0aH0pXCI7XG4gICAgfVxuXG4gICAgQGlmICRhbmQge1xuICAgICAgJG1lZGlhLXF1ZXJ5OiBcIiN7JG1lZGlhLXF1ZXJ5fSBhbmQgI3skYW5kfVwiO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBtZWRpYSBxdWVyeSBwcmVmaXggJ2FsbCBhbmQgJ1xuICAgIEBpZiAkbWVkaWEtdHlwZSA9PSBcImFsbFwiIGFuZCAkbWVkaWEtcXVlcnkgIT0gXCJcIiB7XG4gICAgICAkbWVkaWEtdHlwZTogXCJcIjtcbiAgICAgICRtZWRpYS1xdWVyeTogc3RyLXNsaWNlKHVucXVvdGUoJG1lZGlhLXF1ZXJ5KSwgNik7XG4gICAgfVxuXG4gICAgQG1lZGlhICN7JG1lZGlhLXR5cGUgKyAkbWVkaWEtcXVlcnl9IHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLy8gQWRkIGEgYnJlYWtwb2ludFxuQG1peGluIG1xLWFkZC1icmVha3BvaW50KCRuYW1lLCAkd2lkdGgpIHtcbiAgJG5ldy1icmVha3BvaW50OiAoJG5hbWU6ICR3aWR0aCk7XG4gICRtcS1icmVha3BvaW50czogbWFwLW1lcmdlKCRtcS1icmVha3BvaW50cywgJG5ldy1icmVha3BvaW50KSAhZ2xvYmFsO1xufVxuXG4vLy8gU2hvdyB0aGUgYWN0aXZlIGJyZWFrcG9pbnQgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0XG5AbWl4aW4gbXEtc2hvdy1icmVha3BvaW50cygkc2hvdy1icmVha3BvaW50czogJG1xLXNob3ctYnJlYWtwb2ludHMsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzKSB7XG4gIGJvZHk6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmJlZWQ1O1xuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZiZWVkNTtcbiAgICBjb2xvcjogI2MwOTg1MztcbiAgICBmb250OiBzbWFsbC1jYXB0aW9uO1xuICAgIHBhZGRpbmc6IDNweCA2cHg7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRvcDogMDtcbiAgICB6LWluZGV4OiAxMDA7XG5cbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIHRoYXQgc2hvdWxkIGJlIHNob3duXG4gICAgQGVhY2ggJHNob3ctYnJlYWtwb2ludCBpbiAkc2hvdy1icmVha3BvaW50cyB7XG4gICAgICAkd2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRzaG93LWJyZWFrcG9pbnQsICRicmVha3BvaW50cyk7XG5cbiAgICAgIEBpbmNsdWRlIG1xKCRzaG93LWJyZWFrcG9pbnQsICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzKSB7XG4gICAgICAgIGNvbnRlbnQ6IFwiI3skc2hvdy1icmVha3BvaW50fSDiiaUgI3skd2lkdGh9ICgje21xLXB4MmVtKCR3aWR0aCl9KVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AaWYgbGVuZ3RoKCRtcS1zaG93LWJyZWFrcG9pbnRzKSA+IDAge1xuICBAaW5jbHVkZSBtcS1zaG93LWJyZWFrcG9pbnRzO1xufVxuIiwiLy8gQ29sb3VyIFZhcmlhYmxlc1xuJGVzY2FwZS1ncmVlbjogIzQ0YjY0OTtcbiRlc2NhcGUtb3JhbmdlOiAjZjc5MTRlO1xuXG4vLyBGb250IEZhbWlseVxuLmJyYW5kLXR5cGUge1xuICBmb250LWZhbWlseTogaG91c2Noa2EtcHJvLCBzYW5zLXNlcmlmO1xufVxuXG4vLyBMYXlvdXRcbi5iZy1ncmVlbiB7XG4gIGJhY2tncm91bmQ6ICRlc2NhcGUtZ3JlZW47XG59XG5cbi5iZy13aGl0ZSB7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi5jb250ZW50IHtcbiAgcGFkZGluZzogMi41cmVtO1xuICBjb2xvcjogI2ZmZjtcbn1cbiIsImh0bWwsIGJvZHkge1xuICBmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XG4gIGxpbmUtaGVpZ2h0OiAxLjVyZW07XG59XG5cbmh0bWwge1xuICBiYWNrZ3JvdW5kOiAkZXNjYXBlLWdyZWVuO1xufVxuIiwiJHBhcmFsbGF4LW1pbi1oZWlnaHQ6IDUwMHB4O1xuJGhlYWRlci1uYXYtbWluLWhlaWdodDogMTBweDtcbiRoZWFkZXItbmF2LXdpZHRoOiAxMDB2dztcbiRoZWFkZXItbmF2LXVsLWFmdGVyLXBhZGRpbmc6IDE1cHg7XG4kaGVhZGVyLW5hdi1saXN0LXBhZGRpbmc6IDEwcHg7XG4kaGVhZGVyLW5hdi1ob3Zlci1iYWNrZ3JvdW5kOiAjZjRmNGY0O1xuJGhlYWRlci1uYXYtbG9nby13aWR0aC1kZWZhdWx0OiAyNjBweDtcbiRoZWFkZXItbmF2LWxvZ28td2lkdGgtZGVza3RvcDogMzQwcHg7XG4kaGVhZGVyLW5hdi1tZW51LWljb24tcGFkZGluZzogNTVweCAxNXB4O1xuJGhlYWRlci1uYXYtbWVudS1pY29uLXBhZGRpbmctZGVza3RvcDogNDVweCAxNXB4O1xuJGhlYWRlci1uYXZpY29uLWhlaWdodDogM3B4O1xuJGhlYWRlci1uYXZpY29uLXdpZHRoOiAzMHB4O1xuJGhlYWRlci1uYXZpY29uLWJlZm9yZS10b3A6IDhweDtcbiRoZWFkZXItbmF2aWNvbi1hZnRlci10b3A6IC04cHg7XG4kaGVhZGVyLWNoZWNrZWQtbWVudS1idG4tbWF4LWhlaWdodDogNTQwcHg7XG4kaGVhZGVyLWNoZWNrZWQtbWVudS1pY29uOiAwcHg7XG5cbi8vIEdsb2JhbCBIZWFkZXJcbi5nbG9iYWwtaGVhZGVyIHtcbiAgbWluLWhlaWdodDogMTBweDtcbiAgYmFja2dyb3VuZDogJGVzY2FwZS1ncmVlbjtcblxuICAmX19iZyB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDE4MHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgkZXNjYXBlLWdyZWVuLCAkZXNjYXBlLWdyZWVuKTtcbiAgICB0cmFuc2Zvcm06IHNrZXdZKC00ZGVnKTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcbiAgfVxuXG4gIC8vIEhlYWRlciBOYXZpZ2F2dGlvblxuICAuaGVhZGVyLW5hdiB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHotaW5kZXg6IDM7XG4gICAgd2lkdGg6ICRoZWFkZXItbmF2LXdpZHRoO1xuXG4gICAgdWwge1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIH1cblxuICAgIGxpIGEge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwYWRkaW5nOiAkaGVhZGVyLW5hdi1saXN0LXBhZGRpbmc7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICBjb2xvcjogJGVzY2FwZS1vcmFuZ2U7XG4gICAgICB0cmFuc2Zvcm06IHNrZXdZKDRkZWcpO1xuICAgIH1cblxuICAgIC5tZW51IHtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgbWF4LWhlaWdodDogMDtcbiAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgLjJzIGVhc2U7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCRlc2NhcGUtZ3JlZW4sICRlc2NhcGUtZ3JlZW4pO1xuICAgICAgdHJhbnNmb3JtOiBza2V3WSgtNGRlZyk7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcblxuICAgICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCkge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDM1cHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDM1cHg7XG4gICAgICB9XG5cblxuICAgICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldExhcmdlKSB7XG4gICAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogNDBweDtcbiAgICAgIH1cblxuXG4gICAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ1cHg7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDQ1cHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1lbnUtaWNvbiB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBwYWRkaW5nOiAkaGVhZGVyLW5hdi1tZW51LWljb24tcGFkZGluZztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBwYWRkaW5nOiAkaGVhZGVyLW5hdi1tZW51LWljb24tcGFkZGluZy1kZXNrdG9wO1xuICAgICAgfVxuXG5cbiAgICAgIC5uYXZpY29uIHtcbiAgICAgICAgYmFja2dyb3VuZDogJGVzY2FwZS1vcmFuZ2U7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBoZWlnaHQ6ICRoZWFkZXItbmF2aWNvbi1oZWlnaHQ7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAuMnMgZWFzZS1vdXQ7XG4gICAgICAgIHdpZHRoOiAkaGVhZGVyLW5hdmljb24td2lkdGg7XG5cbiAgICAgICAgJjpiZWZvcmUsXG4gICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICRlc2NhcGUtb3JhbmdlO1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdHJhbnNpdGlvbjogYWxsIC4ycyBlYXNlLW91dDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICB0b3A6ICRoZWFkZXItbmF2aWNvbi1iZWZvcmUtdG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgJjphZnRlciB7XG4gICAgICAgICAgdG9wOiAkaGVhZGVyLW5hdmljb24tYWZ0ZXItdG9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1lbnUtYnRuIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG5cbiAgICAgICY6Y2hlY2tlZCB+IC5tZW51IHtcbiAgICAgICAgbWF4LWhlaWdodDogJGhlYWRlci1jaGVja2VkLW1lbnUtYnRuLW1heC1oZWlnaHQ7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuXG4gICAgICAmOmNoZWNrZWQgfiAubWVudS1pY29uIC5uYXZpY29uIHtcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG4gICAgICAgIH1cblxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJjpjaGVja2VkIH4gLm1lbnUtaWNvbjpub3QoLnN0ZXBzKSAubmF2aWNvbiB7XG4gICAgICAgICY6YmVmb3JlLFxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICB0b3A6ICRoZWFkZXItY2hlY2tlZC1tZW51LWljb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gUGFyYWxsYXggU2Nyb2xsXG4ucGFyYWxsYXgtY29udGFpbmVyIHtcbiAgbWluLWhlaWdodDogNTAwcHg7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4uZ2xvYmFsLWxvZ28ge1xuICBpbWcge1xuICAgIHdpZHRoOiAkaGVhZGVyLW5hdi1sb2dvLXdpZHRoLWRlZmF1bHQ7XG5cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgd2lkdGg6ICRoZWFkZXItbmF2LWxvZ28td2lkdGgtZGVza3RvcDtcbiAgICB9XG4gIH1cbn1cbiIsIiRidG4tbWFyZ2luOiAyMHB4O1xuJGJ0bi1wYWRkaW5nOiAxNXB4O1xuJGJvcmRlci1yYWRpdXM6IDNweDtcbiRidG4td2lkdGgtZGVmYXVsdDogMTAwJTtcblxuLmJ0biB7XG4gIG1hcmdpbi10b3A6ICRidG4tbWFyZ2luO1xuICBwYWRkaW5nOiAkYnRuLXBhZGRpbmc7XG4gIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xuICB3aWR0aDogJGJ0bi13aWR0aC1kZWZhdWx0O1xuXG4gIEBpbmNsdWRlIG1xKCRmcm9tOiB0YWJsZXQpIHtcbiAgICB3aWR0aDogMTgwcHg7XG4gIH1cblxuXG4gICYtLWdyZWVuIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZXNjYXBlLWdyZWVuO1xuICAgIGNvbG9yOiAkZXNjYXBlLWdyZWVuO1xuICB9XG5cbiAgJi0tb3JhbmdlIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZXNjYXBlLW9yYW5nZTtcbiAgICBjb2xvcjogJGVzY2FwZS1vcmFuZ2U7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cbn1cbiIsIiRmb290ZXItbWluLWhlaWdodDogMjAwcHg7XG4kZm9vdGVyLWxpc3QtcGFkZGluZzogNXB4O1xuXG4uZm9vdGVyIHtcbiAgYmFja2dyb3VuZDogJGVzY2FwZS1ncmVlbjtcbiAgbWluLWhlaWdodDogJGZvb3Rlci1taW4taGVpZ2h0O1xuXG4gIHVsIHtcbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0TGFyZ2UpIHtcbiAgICAgIC1tb3otY29sdW1uLWNvdW50OiAyO1xuICAgICAgLW1vei1jb2x1bW4tZ2FwOiAxMHB4O1xuICAgICAgLXdlYmtpdC1jb2x1bW4tY291bnQ6IDI7XG4gICAgICAtd2Via2l0LWNvbHVtbi1nYXA6IDEwcHg7XG4gICAgICBjb2x1bW4tY291bnQ6IDI7XG4gICAgICBjb2x1bW4tZ2FwOiAxMHB4O1xuICAgIH1cbiAgfVxuXG4gICYtbWVudSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldExhcmdlKSB7XG4gICAgICB0ZXh0LWFsaWduOiBpbml0aWFsO1xuICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuICAgICAgcGFkZGluZy10b3A6IDIwcHg7XG4gICAgfVxuXG5cbiAgICBsaSBhIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcGFkZGluZzogJGZvb3Rlci1saXN0LXBhZGRpbmc7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICBjb2xvcjogJGVzY2FwZS1vcmFuZ2U7XG4gICAgfVxuICB9XG59XG4iXX0= */
